/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cemte.jacek.mpo;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import org.apache.commons.math3.util.Combinations;
import org.ejml.factory.SingularMatrixException;
import org.ejml.simple.SimpleMatrix;
import pl.gda.biomed.jwr.fitting.PolynomialFit;

/**
 *
 * @author jwr
 */
public class ColorCalibration {


    public static HashMap<Integer,float[]> colorTempScaleRGB=new HashMap<Integer,float[]>();
    static{
        initColorTempScaleRGB();
    }
            /*
            1000: (255,56,0),
    1500: (255,109,0),
    2000: (255,137,18),
    2500: (255,161,72),
    3000: (255,180,107),
    3500: (255,196,137),
    4000: (255,209,163),
    4500: (255,219,186),
    5000: (255,228,206),
    5500: (255,236,224),
    6000: (255,243,239),
    6500: (255,249,253),
    7000: (245,243,255),
    7500: (235,238,255),
    8000: (227,233,255),
    8500: (220,229,255),
    9000: (214,225,255),
    9500: (208,222,255),
    10000: (204,219,255)}
            */

    public static void initColorTempScaleRGB(){
        float []rgb=new float[3];
        rgb[0]=255f/255f;  rgb[1]=56f/255f;     rgb[2]=0f/255f;
        colorTempScaleRGB.put(1000, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;     rgb[1]=109f/255f;       rgb[2]=0f/255f;
        colorTempScaleRGB.put(1500, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=137f/255f;     rgb[2]=18f/255f;
        colorTempScaleRGB.put(2000, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=161f/255f;     rgb[2]=72f/255f;
        colorTempScaleRGB.put(2500, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=180f/255f;     rgb[2]=107f/255f;
        colorTempScaleRGB.put(3000, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=196f/255f;     rgb[2]=137f/255f;
        colorTempScaleRGB.put(3500, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=209f/255f;     rgb[2]=163f/255f;
        colorTempScaleRGB.put(4000, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=219f/255f;     rgb[2]=186f/255f;
        colorTempScaleRGB.put(4500, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=228f/255f;     rgb[2]=206f/255f;
        colorTempScaleRGB.put(5000, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=236f/255f;     rgb[2]=224f/255f;
        colorTempScaleRGB.put(5500, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=243f/255f;     rgb[2]=239f/255f;
        colorTempScaleRGB.put(6000, rgb);

        rgb=new float[3];
        rgb[0]=255f/255f;   rgb[1]=249f/255f;     rgb[2]=253f/255f;
        colorTempScaleRGB.put(6500, rgb);

        rgb=new float[3];
        rgb[0]=245f/255f;   rgb[1]=243f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(7000, rgb);

        rgb=new float[3];
        rgb[0]=235f/255f;   rgb[1]=238f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(7500, rgb);

        rgb=new float[3];
        rgb[0]=227f/255f;   rgb[1]=233f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(8000, rgb);

        rgb=new float[3];
        rgb[0]=220f/255f;   rgb[1]=229f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(8500, rgb);

        rgb=new float[3];
        rgb[0]=214f/255f;   rgb[1]=225f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(9000, rgb);

        rgb=new float[3];
        rgb[0]=208f/255f;   rgb[1]=222f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(9500, rgb);

        rgb=new float[3];
        rgb[0]=204f/255f;   rgb[1]=219f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(10000, rgb);

        rgb=new float[3];
        rgb[0]=200f/255f;   rgb[1]=217f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(10500, rgb);

        rgb=new float[3];
        rgb[0]=200f/255f;   rgb[1]=213f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(11000, rgb);

        rgb=new float[3];
        rgb[0]=193f/255f;   rgb[1]=213f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(11500, rgb);

        rgb=new float[3];
        rgb[0]=191f/255f;   rgb[1]=211f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(12000, rgb);

        rgb=new float[3];
        rgb[0]=192f/255f;   rgb[1]=207f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(12500, rgb);

        rgb=new float[3];
        rgb[0]=186f/255f;   rgb[1]=208f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(13000, rgb);

        rgb=new float[3];
        rgb[0]=184f/255f;   rgb[1]=207f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(13500, rgb);

        rgb=new float[3];
        rgb[0]=182f/255f;   rgb[1]=206f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(14000, rgb);

        rgb=new float[3];
        rgb[0]=185f/255f;   rgb[1]=202f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(14500, rgb);

        rgb=new float[3];
        rgb[0]=183f/255f;   rgb[1]=201f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(15000, rgb);

        //20000
        rgb=new float[3];
        rgb[0]=168f/255f;   rgb[1]=197f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(15500, rgb);

        //30000
        rgb=new float[3];
        rgb[0]=165f/255f;   rgb[1]=186f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(16000, rgb);

        //40000
        rgb=new float[3];
        rgb[0]=155f/255f;   rgb[1]=188f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(16500, rgb);

        //Arbitrary
        rgb=new float[3];
        rgb[0]=100f/255f;   rgb[1]=100f/255f;     rgb[2]=255f/255f;
        colorTempScaleRGB.put(17000, rgb);

    }




    public static int[] applyColorTemp(int[] imageData, int temp){
        final String methodName="Gray World";

        int r=0,g=0,b=0;
        float aR,aG,aB;

        float []corr=colorTempScaleRGB.get(temp);
        int [] newData=new int[imageData.length];


        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            aR=corr[0]*r;
            aG=corr[1]*g;
            aB=corr[2]*b;
            r=(int)(aR+0.5);
            g=(int)(aG+0.5);
            b=(int)(aB+0.5);
            r=(r>255)?255:r;
            g=(g>255)?255:g;
            b=(b>255)?255:b;

            newData[i]=(0xff<<24)|(r<<16)|(g<<8)|b;

        }
        return newData;
    }


    public static int[] grayWorldWhiteBalance(int[] imageData){
        final String methodName="Gray World";
        long cR=0;
        long cG=0;
        long cB=0;
        int r=0,g=0,b=0;
        float aR,aG,aB;
        float corrR,corrB;
        int [] newData=new int[imageData.length];

        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            cR+=r;
            cG+=g;
            cB+=b;

        }
        aR=cR/imageData.length;
        aG=cG/imageData.length;
        aB=cB/imageData.length;

        corrR=aG/aR;
        corrB=aG/aB;
        System.out.println("Method: "+methodName+", corrR="+corrR+", corrB="+corrB+", AVG R="+aR+", AVG G="+aG+", AVG B="+aB);
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            aR=corrR*r;
            aB=corrB*b;
            r=(int)(aR+0.5);
            b=(int)(aB+0.5);
            r=(r>255)?255:r;
            b=(b>255)?255:b;

            newData[i]=(0xff<<24)|(r<<16)|(g<<8)|b;

        }
        return newData;
    }

    public static int[] whiteWorldWhiteBalance(int[] imageData){
        final String methodName="White World";
        int maxR=-1;
        int maxG=-1;
        int maxB=-1;
        int r=0,g=0,b=0;
        float aR,aG,aB;
        float corrR,corrB;
        int [] newData=new int[imageData.length];

        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            if(r>maxR) maxR=r;
            if(g>maxG) maxG=g;
            if(b>maxB) maxB=b;

        }


        corrR=(float)maxG/(float)maxR;
        corrB=(float)maxG/(float)maxB;
        System.out.println("Method: "+methodName+", corrR="+corrR+", corrB="+corrB);
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            aR=corrR*r;
            aB=corrB*b;
            r=(int)(aR+0.5);
            b=(int)(aB+0.5);
            r=(r>255)?255:r;
            b=(b>255)?255:b;

            newData[i]=(0xff<<24)|(r<<16)|(g<<8)|b;

        }
        return newData;
    }

    public static int[] modWhiteWorldWhiteBalance(int[] imageData){
        final String methodName="Modified White World";
        int maxR=-1;
        int maxG=-1;
        int maxB=-1;
        int r=0,g=0,b=0;
        float aR,aG,aB;
        float corrR,corrB;
        int [] newData=new int[imageData.length];
        int sum=0;
        int sumMax=-1;
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            sum=r+g+b;
            if(sum>sumMax) {
                sumMax=sum;
                maxR=r;
                maxG=g;
                maxB=b;
            }


        }


        corrR=(float)maxG/(float)maxR;
        corrB=(float)maxG/(float)maxB;
        System.out.println("Method: "+methodName+", corrR="+corrR+", corrB="+corrB);
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            aR=corrR*r;
            aB=corrB*b;
            r=(int)(aR+0.5);
            b=(int)(aB+0.5);
            r=(r>255)?255:r;
            b=(b>255)?255:b;

            newData[i]=(0xff<<24)|(r<<16)|(g<<8)|b;

        }
        return newData;
    }


    public static int[] csYUVavgWhiteBalance(int[] imageData){
        final String methodName="Simple use of Y referenced to avg RGB in YUV/RGB color space";
        long cR=0;
        long cG=0;
        long cB=0;
        int r=0,g=0,b=0;
        float aR,aG,aB;
        float corrR,corrB, corrG;
        float Y=0;
        float Ymax=-1000;
        int [] newData=new int[imageData.length];

        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            cR+=r;
            cG+=g;
            cB+=b;
            Y=0.299f*r+0.587f*g+0.114f*b;
            if(Y>Ymax) Ymax=Y;

        }
        aR=(float)cR/(float)imageData.length;
        aG=(float)cG/(float)imageData.length;
        aB=(float)cB/(float)imageData.length;

        corrR=Ymax/aR;
        corrG=Ymax/aG;
        corrB=Ymax/aB;
         System.out.println("Method: "+methodName+", corrR="+corrR+", corrB="+corrB);
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            aR=corrR*r;
            aG=corrG*g;
            aB=corrB*b;
            r=(int)(aR+0.5);
            g=(int)(aG+0.5);
            b=(int)(aB+0.5);
            r=(r>255)?255:r;
            g=(g>255)?255:g;
            b=(b>255)?255:b;

            newData[i]=(0xff<<24)|(r<<16)|(g<<8)|b;

        }
        return newData;
    }

    public static int[] csYUVmaxWhiteBalance(int[] imageData){
        final String methodName="Simple use of Y referenced to max RGB in YUV/RGB color space";
        long cR=0;
        long cG=0;
        long cB=0;
         int maxR=-1;
        int maxG=-1;
        int maxB=-1;
        int r=0,g=0,b=0;
        float aR,aG,aB;
        float corrR,corrB, corrG;
        float Y=0;
        float Ymax=-1000;
        int [] newData=new int[imageData.length];
        int sum=0;
        int sumMax=-1;
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;

            sum=r+g+b;
            if(sum>sumMax) {
                sumMax=sum;
                maxR=r;
                maxG=g;
                maxB=b;
            }

            Y=0.299f*r+0.587f*g+0.114f*b;
            if(Y>Ymax) Ymax=Y;

        }


        corrR=Ymax/maxR;
        corrG=Ymax/maxG;
        corrB=Ymax/maxB;
         System.out.println("Method: "+methodName+", corrR="+corrR+", corrG="+corrG+", corrB="+corrB+", Ymax="+Ymax);
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            aR=corrR*r;
            aG=corrG*g;
            aB=corrB*b;
            r=(int)(aR+0.5);
            g=(int)(aG+0.5);
            b=(int)(aB+0.5);
            r=(r>255)?255:r;
            g=(g>255)?255:g;
            b=(b>255)?255:b;

            newData[i]=(0xff<<24)|(r<<16)|(g<<8)|b;

        }
        return newData;
    }

    public static int[] csYUVgrayWhiteBalance(int[] imageData){
        final String methodName="Simple use of Y referenced to max RGB in YUV/RGB color space. Normalization as in Gray World";
        long cR=0;
        long cG=0;
        long cB=0;
        int r=0,g=0,b=0;
        float aR,aG,aB;
        float corrR,corrB, corrG;
        float corrR1,corrB1, corrG1;
        float Y=0;
        float Ymax=-1000;
        int [] newData=new int[imageData.length];

        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            cR+=r;
            cG+=g;
            cB+=b;
            Y=0.299f*r+0.587f*g+0.114f*b;
            if(Y>Ymax) Ymax=Y;

        }
        aR=(float)cR/(float)imageData.length;
        aG=(float)cG/(float)imageData.length;
        aB=(float)cB/(float)imageData.length;

        corrR=Ymax/aR;
        corrG=Ymax/aG;
        corrB=Ymax/aB;
        corrR1=corrG/corrR;
        corrB1=corrG/corrB;
        System.out.println("Method: "+methodName+", corrR="+corrR+", corrG="+corrG+", corrB="+corrB+", Ymax="+Ymax);
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            aR=corrR1*r;
            //aG=corrG*g;
            aB=corrB1*b;
            r=(int)(aR+0.5);
            //g=(int)(aG+0.5);
            b=(int)(aB+0.5);
            r=(r>255)?255:r;
            //g=(g>255)?255:g;
            b=(b>255)?255:b;

            newData[i]=(0xff<<24)|(r<<16)|(g<<8)|b;

        }
        return newData;
    }

    /**
     *
     * @param imageData
     * @param refColors N columns x 3 rows (RGB in a row), the matrix is later
     * transpose
     * @param actualColors N columns x 3 rows (RGB in a row), the matrix is later
     * transpose
     * @return
     */
    public static int[] calibrateImage(int[] imageData, int[][] refColors, int[][] actualColors) {

        double[][] calibValues = new double[3][3];
        double[][] bestCalibValues = new double[3][3];
        int size=refColors.length-3;
        int[] subset=new int[3];
        int[][] aRGB=new int[3][3];
        int[][] rRGB=new int[3][3];
        int j=0;
        //HashMap <Integer,Float> error=new HashMap <Integer,Float>();
        float error, minError=Float.MAX_VALUE;
        int jMinError=0;
        if(refColors.length!=actualColors.length)
            return null;

        //only one set of coefficients
        if(refColors.length==3){

        } else
        //find the best coeficients using other as a measure of error
        {
            Combinations c=new Combinations(refColors.length, 3);
            Iterator<int[]> iterator=c.iterator();
            while(iterator.hasNext()){
                subset=iterator.next();
                //System.out.println("Result: "+Arrays.toString(subset));

                for(int i=0;i<subset.length; i++){

                    rRGB[i]=refColors[subset[i]];
                    aRGB[i]=actualColors[subset[i]];
                    //System.out.println("M1: "+Arrays.toString(rRGB[i])+" M2: "+Arrays.toString(aRGB[i]));
                }
                calibValues=calculateCalibValues(rRGB, aRGB);
                if(calibValues==null){
                    //System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                    //System.out.println("CalibValues problem, skipping set No: "+j);
                    //System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                    j++;
                    continue;
                }
                error=calculateError(refColors, actualColors, calibValues);

                //System.out.println("error: "+error+", j="+j);
                //if(error<minError){
                if(error<minError && error>0.01){
                    minError=error;
                    jMinError=j;
                    for(int k=0;k<3;k++){
                        for(int l=0;l<3;l++){
                            bestCalibValues[k][l]=calibValues[k][l];
                        }
                    }
                    //System.out.println("Min error: "+error+", j="+j);
                }

                j++;
                //System.out.println("M1: "+Arrays.toString(rRGB)+" M2: "+Arrays.toString(aRGB));
            }
            System.out.println("MIN TOTAL error: "+minError+", j="+jMinError);
            System.out.println("BEST CALIB VALUES:");
            System.out.println("calib values 0: " + Arrays.toString(bestCalibValues[0]));
            System.out.println("calib values 1: " + Arrays.toString(bestCalibValues[1]));
            System.out.println("calib values 2: " + Arrays.toString(bestCalibValues[2]));

        }

        /*
        int[][] aRGB = {{15, 157, 73}, {189, 14, 50}, {0, 136, 164}};
        int[][] rRGB = {{70, 148, 73}, {175, 54, 60}, {8, 133, 161}};

        calculateCalibValues(refColors, actualColors);
        */

        if(minError>=Float.MAX_VALUE ||imageData==null)
            return imageData;
        else {
            System.out.println("Converting image...");
            return (convert(imageData,bestCalibValues));
        }
    }



    /**
     *
     * @param imageData
     * @param refColors N columns x 3 rows (RGB in a row), the matrix is later
     * transpose
     * @param actualColors N columns x 3 rows (RGB in a row), the matrix is later
     * transpose
     * @return
     */
    public static int[][] calibrateData(int[][] refColors, int[][] actualColors) {

        double[][] calibValues = new double[3][3];
        double[][] bestCalibValues = new double[3][3];
        int size=refColors.length-3;
        int[] subset=new int[3];
        int[][] aRGB=new int[3][3];
        int[][] rRGB=new int[3][3];
        int j=0;
        //HashMap <Integer,Float> error=new HashMap <Integer,Float>();
        float error, minError=Float.MAX_VALUE;
        int jMinError=0;
        if(refColors.length!=actualColors.length)
            return null;

        //only one set of coefficients
        if(refColors.length==3){

        } else
        //find the best coeficients using other as a measure of error
        {
            Combinations c=new Combinations(refColors.length, 3);
            Iterator<int[]> iterator=c.iterator();
            while(iterator.hasNext()){
                subset=iterator.next();
                //System.out.println("Result: "+Arrays.toString(subset));

                for(int i=0;i<subset.length; i++){

                    rRGB[i]=refColors[subset[i]];
                    aRGB[i]=actualColors[subset[i]];
                    //System.out.println("M1: "+Arrays.toString(rRGB[i])+" M2: "+Arrays.toString(aRGB[i]));
                }
                calibValues=calculateCalibValues(rRGB, aRGB);
                if(calibValues==null){
                    //System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                    //System.out.println("CalibValues problem, skipping set No: "+j);
                    //System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                    j++;
                    continue;
                }
                error=calculateError(refColors, actualColors, calibValues);

                //System.out.println("error: "+error+", j="+j);
                //if(error<minError){
                if(error<minError && error>0.01){
                    minError=error;
                    jMinError=j;
                    for(int k=0;k<3;k++){
                        for(int l=0;l<3;l++){
                            bestCalibValues[k][l]=calibValues[k][l];
                        }
                    }
                    //System.out.println("Min error: "+error+", j="+j);
                }

                j++;
                //System.out.println("M1: "+Arrays.toString(rRGB)+" M2: "+Arrays.toString(aRGB));
            }
            System.out.println("MIN TOTAL error: "+minError+", j="+jMinError);
            System.out.println("BEST CALIB VALUES:");
            System.out.println("calib values 0: " + Arrays.toString(bestCalibValues[0]));
            System.out.println("calib values 1: " + Arrays.toString(bestCalibValues[1]));
            System.out.println("calib values 2: " + Arrays.toString(bestCalibValues[2]));

        }

        /*
        int[][] aRGB = {{15, 157, 73}, {189, 14, 50}, {0, 136, 164}};
        int[][] rRGB = {{70, 148, 73}, {175, 54, 60}, {8, 133, 161}};

        calculateCalibValues(refColors, actualColors);
        */

        if(minError>=Float.MAX_VALUE ||actualColors==null)
            return actualColors;
        else {
            System.out.println("Converting image...");
            return (convertData(actualColors,bestCalibValues));
        }
    }


    public static float calculateError(int [][] refColors, int [][] actualColors, double [][]calibValues){
        float error=0;
        float cumError=0;
        int [] trActualColors= new int[3];
        try{
            for(int i=0;i <refColors.length; i++){
                SimpleMatrix tr = new SimpleMatrix(calibValues);
                SimpleMatrix aV = new SimpleMatrix(3,1);

                aV.set(0, 0, actualColors[i][0]);
                aV.set(1, 0, actualColors[i][1]);
                aV.set(2, 0, actualColors[i][2]);


                SimpleMatrix x = tr.mult(aV);
                //System.out.println("Solution RGB: " + x.get(0, 0) + ", " + x.get(1, 0) + ", " + x.get(2, 0));
                trActualColors[0]=(int)(x.get(0, 0)+0.5);
                trActualColors[1]=(int)(x.get(1, 0)+0.5);
                trActualColors[2]=(int)(x.get(2, 0)+0.5);

                error=mse(refColors[i],trActualColors);
                cumError+=error;
                /*
                for (int i = 0; i < 3; i++) {
                    System.out.println("");
                    for (int j = 0; j < 3; j++) {
                        System.out.print("[r" + i + j + "]=" + x.get(i, j));
                    }
                }
                 */


            }

        } catch (Exception e) {
                System.out.println("\nException: " + e);
                System.out.println("calib values 0: " + Arrays.toString(calibValues[0]));
                System.out.println("calib values 1: " + Arrays.toString(calibValues[1]));
                System.out.println("calib values 2: " + Arrays.toString(calibValues[2]));

        }
        cumError/=refColors[0].length;
        return cumError;
    }

    public static float mse(int []r, int []a){
        float error=0;

        for(int i=0; i<r.length; i++){
            error+=((r[i]-a[i])*(r[i]-a[i]));
        }
        //System.out.println("INT ERROR: "+error);
        return error/r.length;

    }

    public static int [] convert(int[] imageData, double[][] calibration) {

        int r,g,b;
        int nR,nG,nB;
        SimpleMatrix A = new SimpleMatrix(3, 3);
        SimpleMatrix x = new SimpleMatrix(3, 1);
        SimpleMatrix y;

        A.set(0, 0, calibration[0][0]);
        A.set(0, 1, calibration[0][1]);
        A.set(0, 2, calibration[0][2]);

        A.set(1, 0, calibration[1][0]);
        A.set(1, 1, calibration[1][1]);
        A.set(1, 2, calibration[1][2]);

        A.set(2, 0, calibration[2][0]);
        A.set(2, 1, calibration[2][1]);
        A.set(2, 2, calibration[2][2]);



         for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;
            x.set(0, 0, r);
            x.set(1, 0, g);
            x.set(2, 0, b);
            y=A.mult(x);
            r=(int)(y.get(0,0)+0.5);
            g=(int)(y.get(1,0)+0.5);
            b=(int)(y.get(2,0)+0.5);
            if(r>255) r=255;
            if(g>255) g=255;
            if(b>255) b=255;
            if(r<0) r=0;
            if(g<0) g=0;
            if(b<0) b=0;


            imageData[i]=(0xFF<<24)|((r&0xFF)<<16)|((g&0xFF)<<8)|(b&0xFF);

        }

        return imageData;
    }


    public static int [][] convertData(int[][] data, double[][] calibration) {

        int r,g,b;
        int nR,nG,nB;
        SimpleMatrix A = new SimpleMatrix(3, 3);
        SimpleMatrix x = new SimpleMatrix(3, 1);
        SimpleMatrix y;

        A.set(0, 0, calibration[0][0]);
        A.set(0, 1, calibration[0][1]);
        A.set(0, 2, calibration[0][2]);

        A.set(1, 0, calibration[1][0]);
        A.set(1, 1, calibration[1][1]);
        A.set(1, 2, calibration[1][2]);

        A.set(2, 0, calibration[2][0]);
        A.set(2, 1, calibration[2][1]);
        A.set(2, 2, calibration[2][2]);



         for(int i=0;i<data.length;i++){

            r=data[i][0];
            g=data[i][1];
            b=data[i][2];
            x.set(0, 0, r);
            x.set(1, 0, g);
            x.set(2, 0, b);
            y=A.mult(x);
            r=(int)(y.get(0,0)+0.5);
            g=(int)(y.get(1,0)+0.5);
            b=(int)(y.get(2,0)+0.5);
            if(r>255) r=255;
            if(g>255) g=255;
            if(b>255) b=255;
            if(r<0) r=0;
            if(g<0) g=0;
            if(b<0) b=0;

            data[i][0]=r;
            data[i][1]=g;
            data[i][2]=b;



        }

        return data;
    }


    /**
     * Find matrix of coefficients used to hipotetically transform actual values
     * (A) to reference values (b, result)
     *
     * Rr=A Ra
     * A=Rr Ra-1
     *
     * Rr -> rRGB
     * Ra -> aRGB
     *
     *
     * @param refColors
     * [rr1 gr1 br1] [rr2 gr2 br2] [rr3 gr3 br3]
     * @param actualColors
     * [r1 g1 b1] [r2 g2 b2] [r3 g3 b3]
     * @return
     * [a00 a01 a02] [a10 a11 a12] [a20 a21 a22]
     */
    public static double[][] calculateCalibValues(int[][] refColors, int[][] actualColors) {
        double[][] calibValues = new double[refColors.length][refColors.length];
        SimpleMatrix aRGB = new SimpleMatrix(actualColors.length, actualColors[0].length);
        SimpleMatrix rRGB = new SimpleMatrix(refColors.length, refColors[0].length);

        /*
        //Linearization of color values
        */

        for (int i = 0; i < actualColors.length; i++) {
            for (int j = 0; j < actualColors[0].length; j++) {
                aRGB.set(j, i, actualColors[i][j]);
            }
        }
        for (int i = 0; i < refColors.length; i++) {
            for (int j = 0; j < refColors[0].length; j++) {
                rRGB.set(j, i, refColors[i][j]);
            }
        }

        try {
            SimpleMatrix i_aRGB=aRGB.invert();
            SimpleMatrix a=rRGB.mult(i_aRGB);
            //SimpleMatrix x = aRGB.solve(rRGB);
            //x.transpose();

            for (int i = 0; i < calibValues.length; i++) {
                //System.out.println("");
                for (int j = 0; j < calibValues[0].length; j++) {
                    //System.out.print("[a" + i + j + "]=" + a.get(i, j));
                    calibValues[i][j]=a.get(i, j);
                }
            }

        } catch (Exception e) {
            System.out.println("Exception: " + e);
            System.out.println("Ex ref 0: " + Arrays.toString(refColors[0]));
            System.out.println("Ex ref 1: " + Arrays.toString(refColors[1]));
            System.out.println("Ex ref 2: " + Arrays.toString(refColors[2]));

            System.out.println("Ex act 0: " + Arrays.toString(actualColors[0]));
            System.out.println("Ex act 1: " + Arrays.toString(actualColors[1]));
            System.out.println("Ex act 2: " + Arrays.toString(actualColors[2]));
            return null;
        }
        return calibValues;
    }



    public static int[] calibrateImagePoly(int[] imageData, int[][] refColors, int[][] actualColors,int polyDegree) {
        int r,g,b;
        int[][] polyLUTs=calculatePolynomialLUTValues(refColors,actualColors,polyDegree);
        for(int i=0;i<imageData.length;i++){

            r=(imageData[i]>>16)&0xff;
            g=(imageData[i]>>8)&0xff;
            b=(imageData[i])&0xff;


            r=polyLUTs[0][r];
            g=polyLUTs[1][g];
            b=polyLUTs[2][b];

            imageData[i]=(0xFF<<24)|((r&0xFF)<<16)|((g&0xFF)<<8)|(b&0xFF);

        }

        return imageData;
    }


    public static int[][] calculatePolynomialLUTValues(int[][] refColors, int[][] actualColors, int polyDegree) {
        int[][] polyLUTs = new int[3][256];



            PolynomialFit pf=new PolynomialFit();
            double []nR=new double[refColors.length];
            double []nA=new double[actualColors.length];

            int []lutR=new int[256];
            int []lutG=new int[256];
            int []lutB=new int[256];

            for(int i=0;i<refColors.length; i++){
                nR[i]=refColors[i][0];
                nA[i]=actualColors[i][0];
            }

            System.out.println("");
            for(int i=0; i< nR.length; i++){
                System.out.print(""+nR[i]);
                System.out.print(" "+nA[i]);
                System.out.println("");
            }


            pf.addData(nR, nA);
            pf.fit(polyDegree);
            for(int i=0;i<lutR.length; i++){
                lutR[i]=(int)(pf.getY(i)+0.5);
                if(lutR[i]>255) lutR[i]=255;
            }

            for(int i=0;i<refColors.length; i++){
                nR[i]=refColors[i][1];
                nA[i]=actualColors[i][1];
            }
            pf.addData(nR, nA);
            pf.fit(polyDegree);
            for(int i=0;i<lutG.length; i++){
                lutG[i]=(int)(pf.getY(i)+0.5);
                if(lutG[i]>255) lutG[i]=255;
            }

            for(int i=0;i<refColors.length; i++){
                nR[i]=refColors[i][2];
                nA[i]=actualColors[i][2];
            }
            pf.addData(nR, nA);
            pf.fit(polyDegree);
            for(int i=0;i<lutB.length; i++){
                lutB[i]=(int)(pf.getY(i)+0.5);
                if(lutB[i]>255) lutB[i]=255;
            }

            polyLUTs[0]=lutR;
            polyLUTs[1]=lutG;
            polyLUTs[2]=lutB;

            return polyLUTs;


    }


    public static int[] calibrateImageINTPoly(int[] imageData, int[][] refColors, int[][] actualColors,int polyDegree) {
        int r,g,b;

        PolynomialFit pf=new PolynomialFit();
            double []nR=new double[refColors.length];
            double []nA=new double[actualColors.length];

        for(int i=0;i<refColors.length; i++){
                nR[i]=(0xFF<<24)|((refColors[i][0]&0xFF)<<16)|((refColors[i][1]&0xFF)<<8)|(refColors[i][2]&0xFF);
                nA[i]=(0xFF<<24)|((actualColors[i][0]&0xFF)<<16)|((actualColors[i][1]&0xFF)<<8)|(actualColors[i][2]&0xFF);
            }
        pf.addData(nR, nA);
        pf.fit(polyDegree);

        for(int i=0;i<imageData.length;i++){

            imageData[i]=(int)(pf.getY(imageData[i]));

        }

        return imageData;
    }



    public static void main(String[] a) {
        int m, n;
        m = 3;
        n = 3;
        SimpleMatrix A = new SimpleMatrix(m, n);
        SimpleMatrix b = new SimpleMatrix(m, 1);

        /*
         for( int i = 0; i < m; i++ ) {
         for( int j = 0; j < n; j++ ) {
         A.set(i, j, 1);
         }
         }
         */
        A.set(0, 0, 4);
        A.set(0, 1, 2);
        A.set(0, 2, -2);

        A.set(1, 0, 2);
        A.set(1, 1, 8);
        A.set(1, 2, 4);

        A.set(2, 0, 30);
        A.set(2, 1, 12);
        A.set(2, 2, -4);

        b.set(0, 0, 10);
        b.set(1, 0, 32);
        b.set(2, 0, 24);

        try {
            SimpleMatrix x = A.solve(b);
            System.out.println("Solution: " + x.get(0, 0) + ", " + x.get(1, 0) + ", " + x.get(2, 0));

        } catch (SingularMatrixException e) {
            System.out.println("Exception: " + e);
        }

        //RGB in rows, but it will be converted to columns in calculateCalibValues function
        int[][] aRGB = {{15, 157, 73}, {189, 14, 50}, {0, 136, 164}};
        int[][] rRGB = {{70, 148, 73}, {175, 54, 60}, {8, 133, 161}};

        double[][] transf=calculateCalibValues(rRGB, aRGB);
        System.out.println("");
        System.out.println("TRANSF:"+Arrays.toString(transf[0]));
        System.out.println("TRANSF:"+Arrays.toString(transf[1]));
        System.out.println("TRANSF:"+Arrays.toString(transf[2]));

        System.out.println("");

        if(transf!=null){
            SimpleMatrix tr = new SimpleMatrix(transf);
            SimpleMatrix aV = new SimpleMatrix(3,1);

            aV.set(0, 0, 15);
            aV.set(1, 0, 157);
            aV.set(2, 0, 73);

            /*
            aV.set(0, 0, 15);
            aV.set(0, 1, 189);
            aV.set(0, 2, 0);

            aV.set(1, 0, 157);
            aV.set(1, 1, 14);
            aV.set(1, 2, 136);

            aV.set(2, 0, 73);
            aV.set(2, 1, 50);
            aV.set(2, 2, 164);
                    */
            try {
                SimpleMatrix x = tr.mult(aV);
                System.out.println("Solution RGB: " + x.get(0, 0) + ", " + x.get(1, 0) + ", " + x.get(2, 0));
                /*
                for (int i = 0; i < 3; i++) {
                    System.out.println("");
                    for (int j = 0; j < 3; j++) {
                        System.out.print("[r" + i + j + "]=" + x.get(i, j));
                    }
                }
                 */

            } catch (SingularMatrixException e) {
                System.out.println("Exception: " + e);
            }



        }//if

        System.out.println("\n\n\n");
       /*
       int[][] ref = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9},{9, 10, 11},{12, 13, 14}};
       int[][] act = {{11, 12, 13}, {14, 15, 16}, {17, 18, 19},{19, 20, 21},{22, 23, 24}};
       */

        int[][] ref = {{120, 80, 65}, {201, 148, 127}, {92, 121, 159},{80, 113, 66},{137,123,179},{68,196,172},
                       {226, 120, 8}, {85, 82, 169}, {207, 72, 94},{102, 49, 109},{145,197,58},{232,163,11},
                       {65, 45, 153}, {15, 157, 73}, {189, 14, 50},{233, 204, 0},{202,59,148},{0,136,164},
                       {244, 244, 243}, {201, 201, 201}, {161, 161, 161},{122, 123, 121},{85,85,85},{52,52,52}
                      };
       int[][] act = {{127, 79, 52}, {213, 146, 105}, {108, 121, 138},{92, 111, 53},{148,123,155},{101,195,147},
                       {236, 116, 0}, {93, 85, 147}, {215, 69, 76},{107, 50, 94},{164,194,29},{245,159,0},
                       {71, 50, 134}, {61, 155, 57}, {195, 0, 33},{249, 200, 0},{210,59,127},{51,136,142},
                       {255, 242, 208}, {218, 199, 172}, {175, 160, 137},{133, 122, 103},{93,84,72},{57,51,43}
                      };
       calibrateImage(null, ref, act);

    }

}
